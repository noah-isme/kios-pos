// Prisma schema for the Kios POS application

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  CASHIER
}

enum OutletRole {
  OWNER
  MANAGER
  CASHIER
}

enum PaymentMethod {
  CASH
  CARD
  QRIS
  EWALLET
}

enum StockMovementType {
  ADJUSTMENT
  INITIAL
  PURCHASE
  SALE
  TRANSFER_IN
  TRANSFER_OUT
  IN
  OUT
  RETURN
}

model CashSession {
  id           String   @id @default(cuid())
  outletId     String
  userId       String
  openingCash  Decimal  @db.Decimal(12, 2)
  closingCash  Decimal? @db.Decimal(12, 2)
  expectedCash Decimal? @db.Decimal(12, 2)
  difference   Decimal? @db.Decimal(12, 2)
  openTime     DateTime @default(now())
  closeTime    DateTime?

  outlet Outlet @relation(fields: [outletId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([outletId, closeTime])
  @@index([userId, closeTime])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  passwordHash   String?
  emailVerified  DateTime?
  image          String?
  role           Role      @default(CASHIER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  sales          Sale[]    @relation("SaleCashier")
  refundApprovals Refund[] @relation("RefundApprover")
  userOutlets     UserOutlet[]
  requestedTransfers StockTransfer[] @relation("TransferRequestedBy")
  approvedTransfers StockTransfer[] @relation("TransferApprovedBy")
  cashSessions   CashSession[]
  stockMovements StockMovement[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Supplier {
  id        String    @id @default(cuid())
  name      String
  email     String?
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Outlet {
  id          String        @id @default(cuid())
  name        String
  code        String        @unique
  address     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  inventories Inventory[]
  sales       Sale[]
  dailySummaries DailyCashSummary[]
  userOutlets UserOutlet[]
  transfersFrom StockTransfer[] @relation("TransferFrom")
  transfersTo StockTransfer[] @relation("TransferTo")
  cashSessions CashSession[]
}

model Product {
  id             String          @id @default(cuid())
  name           String
  sku            String          @unique
  barcode        String?         @unique
  description    String?
  price          Decimal         @db.Decimal(12, 2)
  costPrice      Decimal?        @db.Decimal(12, 2)
  isActive       Boolean         @default(true)
  defaultDiscountPercent Decimal? @db.Decimal(5, 2)
  promoName      String?
  promoPrice     Decimal?        @db.Decimal(12, 2)
  promoStart     DateTime?
  promoEnd       DateTime?
  isTaxable      Boolean         @default(false)
  taxRate        Decimal?        @db.Decimal(5, 2)
  categoryId     String?
  supplierId     String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  category       Category?       @relation(fields: [categoryId], references: [id])
  supplier       Supplier?       @relation(fields: [supplierId], references: [id])
  inventoryLines Inventory[]
  saleItems      SaleItem[]
  stockTransfers StockTransfer[]
}

model Inventory {
  id           String             @id @default(cuid())
  productId    String
  outletId     String
  quantity     Int
  costPrice    Decimal?           @db.Decimal(12, 2)
  updatedAt    DateTime           @updatedAt
  product      Product            @relation(fields: [productId], references: [id])
  outlet       Outlet             @relation(fields: [outletId], references: [id])
  movements    StockMovement[]

  @@unique([productId, outletId])
}

model StockMovement {
  id             String            @id @default(cuid())
  inventoryId    String
  type           StockMovementType
  quantity       Int
  reference      String?
  note           String?
  occurredAt     DateTime          @default(now())
  createdById    String?
  inventory      Inventory         @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  createdBy      User?             @relation(fields: [createdById], references: [id])
}

model StockTransfer {
  id                String            @id @default(cuid())
  transferNumber    String            @unique
  fromOutletId      String
  toOutletId        String
  productId         String
  quantity          Int
  costPrice         Decimal           @db.Decimal(12, 2)
  status            String            @default("PENDING") // PENDING, APPROVED, REJECTED, COMPLETED
  requestedById     String
  approvedById      String?
  notes             String?
  requestedAt       DateTime          @default(now())
  approvedAt        DateTime?
  completedAt       DateTime?
  fromOutlet        Outlet            @relation("TransferFrom", fields: [fromOutletId], references: [id])
  toOutlet          Outlet            @relation("TransferTo", fields: [toOutletId], references: [id])
  product           Product           @relation(fields: [productId], references: [id])
  requestedBy       User              @relation("TransferRequestedBy", fields: [requestedById], references: [id])
  approvedBy        User?             @relation("TransferApprovedBy", fields: [approvedById], references: [id])
}

model Sale {
  id             String       @id @default(cuid())
  receiptNumber  String       @unique
  outletId       String
  cashierId      String?
  totalGross     Decimal      @db.Decimal(12, 2)
  discountTotal  Decimal      @db.Decimal(12, 2) @default(0)
  taxRate        Decimal?     @db.Decimal(5, 2)
  taxAmount      Decimal?     @db.Decimal(12, 2)
  totalNet       Decimal      @db.Decimal(12, 2)
  soldAt         DateTime     @default(now())
  status         String       @default("COMPLETED")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  outlet         Outlet       @relation(fields: [outletId], references: [id])
  cashier        User?        @relation("SaleCashier", fields: [cashierId], references: [id])
  items          SaleItem[]
  payments       Payment[]
  refunds        Refund[]
}

model SaleItem {
  id          String   @id @default(cuid())
  saleId      String
  productId   String
  quantity    Int
  unitPrice   Decimal  @db.Decimal(12, 2)
  discount    Decimal  @db.Decimal(12, 2) @default(0)
  taxAmount   Decimal? @db.Decimal(12, 2)
  total       Decimal  @db.Decimal(12, 2)
  sale        Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id         String        @id @default(cuid())
  saleId     String
  method     PaymentMethod
  amount     Decimal       @db.Decimal(12, 2)
  paidAt     DateTime      @default(now())
  reference  String?
  sale       Sale          @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

model Refund {
  id            String   @id @default(cuid())
  saleId        String
  amount        Decimal  @db.Decimal(12, 2)
  reason        String?
  approvedById  String?
  processedAt   DateTime @default(now())
  sale          Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  approvedBy    User?    @relation("RefundApprover", fields: [approvedById], references: [id])
}

model DailyCashSummary {
  id          String   @id @default(cuid())
  outletId    String
  businessDay DateTime
  totalSales  Decimal  @db.Decimal(12, 2)
  totalItems  Int
  totalCash   Decimal  @db.Decimal(12, 2)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  outlet      Outlet   @relation(fields: [outletId], references: [id], onDelete: Cascade)

  @@unique([outletId, businessDay])
}

model TaxSetting {
  id        String   @id @default(cuid())
  name      String
  rate      Decimal  @db.Decimal(5, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserOutlet {
  id         String     @id @default(cuid())
  userId     String
  outletId   String
  role       OutletRole @default(CASHIER)
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  outlet     Outlet     @relation(fields: [outletId], references: [id], onDelete: Cascade)

  @@unique([userId, outletId])
}
